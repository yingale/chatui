{"ast":null,"code":"var _jsxFileName = \"/Users/yogeshingale/Sites/personal/dripShopUI/client/src/components/ChatArea.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport { useMessages, useMessagesDispatch } from '../contexts/MessagesContext';\nimport socket from '../Socket';\nimport MessageForm from './MessageForm';\nimport MessageList from './MessageList';\nimport { fetchGroupData, fetchMessage, fetchMessageGroup } from '../Integration';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ChatArea({\n  receiver,\n  receiverId,\n  type\n}) {\n  _s();\n  const messages = useMessages();\n  const dispatch = useMessagesDispatch();\n  const [oldMessage, setOldMessage] = useState([]); // Initialize with an empty array\n  const userDetails = JSON.parse(localStorage.getItem('userdata'));\n  const username = userDetails.username;\n  const senderId = userDetails.uid;\n  useEffect(() => {\n    function onNewUser(newUser) {\n      dispatch({\n        type: 'newmessage',\n        message: {\n          type: 'information',\n          user: newUser,\n          text: 'logged in.'\n        }\n      });\n    }\n    function onExitUser(exitUser) {\n      dispatch({\n        type: 'newmessage',\n        message: {\n          type: 'information',\n          user: exitUser,\n          text: 'left.'\n        }\n      });\n    }\n    function onNewMessage(message) {\n      dispatch({\n        type: 'newmessage',\n        message: {\n          type: 'secondary',\n          user: message.user,\n          text: message.text\n        }\n      });\n    }\n    socket.on('new user', onNewUser);\n    socket.on('exit user', onExitUser);\n    socket.on('new message', onNewMessage);\n    return () => {\n      socket.off('new user', onNewUser);\n      socket.off('exit user', onExitUser);\n      socket.off('new message', onNewMessage);\n    };\n  }, [dispatch]);\n  useEffect(() => {\n    const fetchData = async () => {\n      let oldData = [];\n      try {\n        if (type === \"group\") {\n          oldData = await fetchMessageGroup(receiverId);\n        } else {\n          oldData = await fetchMessage(senderId, receiverId);\n        }\n        setOldMessage(oldData);\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n        // Handle the error, e.g., show an error message to the user\n      }\n    };\n\n    fetchData();\n  }, [senderId, receiverId]);\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"column\",\n    children: [/*#__PURE__*/_jsxDEV(MessageList, {\n      messages: messages,\n      oldMessage: oldMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"columns is-mobile has-background-white is-paddingless has-text-centered messageform\",\n      children: /*#__PURE__*/_jsxDEV(MessageForm, {\n        fullName: username,\n        senderId: senderId,\n        receiverId: receiverId,\n        type: type\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n}\n_s(ChatArea, \"lCPVijpDtFU7AQGN+jKDhQ4tPJw=\", false, function () {\n  return [useMessages, useMessagesDispatch];\n});\n_c = ChatArea;\nexport default ChatArea;\nvar _c;\n$RefreshReg$(_c, \"ChatArea\");","map":{"version":3,"names":["useEffect","useState","useMessages","useMessagesDispatch","socket","MessageForm","MessageList","fetchGroupData","fetchMessage","fetchMessageGroup","jsxDEV","_jsxDEV","ChatArea","receiver","receiverId","type","_s","messages","dispatch","oldMessage","setOldMessage","userDetails","JSON","parse","localStorage","getItem","username","senderId","uid","onNewUser","newUser","message","user","text","onExitUser","exitUser","onNewMessage","on","off","fetchData","oldData","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","fullName","_c","$RefreshReg$"],"sources":["/Users/yogeshingale/Sites/personal/dripShopUI/client/src/components/ChatArea.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useMessages, useMessagesDispatch } from '../contexts/MessagesContext';\nimport socket from '../Socket';\nimport MessageForm from './MessageForm';\nimport MessageList from './MessageList';\nimport { fetchGroupData, fetchMessage, fetchMessageGroup } from '../Integration';\n\nfunction ChatArea({ receiver, receiverId, type }) {\n  const messages = useMessages();\n  const dispatch = useMessagesDispatch();\n  const [oldMessage, setOldMessage] = useState([]); // Initialize with an empty array\n  const userDetails = JSON.parse(localStorage.getItem('userdata'));\n  const username = userDetails.username;\n  const senderId = userDetails.uid;\n\n  useEffect(() => {\n    function onNewUser(newUser) {\n      dispatch({\n        type: 'newmessage',\n        message: {\n          type: 'information',\n          user: newUser,\n          text: 'logged in.'\n        }\n      });\n    }\n\n    function onExitUser(exitUser) {\n      dispatch({\n        type: 'newmessage',\n        message: {\n          type: 'information',\n          user: exitUser,\n          text: 'left.'\n        }\n      });\n    }\n\n    function onNewMessage(message) {\n      dispatch({\n        type: 'newmessage',\n        message: {\n          type: 'secondary',\n          user: message.user,\n          text: message.text\n        }\n      });\n    }\n\n    socket.on('new user', onNewUser);\n    socket.on('exit user', onExitUser);\n    socket.on('new message', onNewMessage);\n\n    return () => {\n      socket.off('new user', onNewUser);\n      socket.off('exit user', onExitUser);\n      socket.off('new message', onNewMessage);\n    }\n  }, [dispatch]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      let oldData =[]\n      try {\n        if(type===\"group\") {\n          oldData = await fetchMessageGroup(receiverId);\n\n        } else {\n          oldData = await fetchMessage(senderId, receiverId);\n        }\n        setOldMessage(oldData);\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n        // Handle the error, e.g., show an error message to the user\n      }\n    };\n\n    fetchData();\n\n  }, [senderId, receiverId]);\n\n  return (\n    <section className=\"column\">\n      <MessageList messages={messages} oldMessage={oldMessage} />\n      <div className=\"columns is-mobile has-background-white is-paddingless has-text-centered messageform\">\n        <MessageForm fullName={username} senderId={senderId} receiverId={receiverId} type={type} />\n      </div>\n    </section>\n  );\n}\n\nexport default ChatArea;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}